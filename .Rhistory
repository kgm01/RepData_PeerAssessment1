swirl()
cran <- tbl_df(mydf)
load(mydf)
load("mydf")
myd
head(mydf)
mydf <- read.csv(path2csv)
can <- tbl_df(mydf)
names(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
-5:20
-(-5:20)
-(5:20)
select(cran, x:size)
select(cran, X:size)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country =="US")
?Comparison
filter(cran, users == "IN" && r_version == "3.0.2")
filter(cran, country == "IN" && r_version == "3.0.2")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
library(c(swirl, dplyr))
library(dplyr)
library(swirl)
rm(prob4,prob5)
swirl()
skip()
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, c(ip_id, package, size))
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
swirl()
33/36
deck
52
4/52
0
12/52
3/51
2/51
0.8*0.8
0.64
mypdf
mypdf(lower=0,upper=1.6)
mypdf(0,1.6)
mypdf
integtrate(mypdf,0,1.6)
integrate(mypdf,0,1.6)
1
sqrt(2)
0.001*0.997
(0.001*0.997)/((0.001*0.997) + (1-0.98.5)*(1-0.001))
(0.001*0.997)/((0.001*0.997) + (1-0.985)*(1-0.001))
(1-0.985)*(1-0.001)
(0.001*0.997)/((0.001*0.997) + (1-0.985)*(1-0.001))
library(datasets)
library(swirl)
swirl()
?choose
choose(5,3)*(0.8^3)*(0.2^2)
x <-1
y <- 0
while (x <= 3) {choose(5,x)*(.8)^x*(.2)^(5-x)
y <- y + choose(5,x)*(.8)^x*(.2)^(5-x)
x <- x + 1}
x
x <-1
y
brn <- function(x) {choose(5,x)*(.8)^x*(.2)^(5-x)}
brn(c(3,4,5))
sum(brnc(3,4,5))
sum(brn(c(3,4,5))
sum(brn(c(3,4,5)))
rm(brn,x)
pbinom(2,5,0.8,lower.tail = FALSE())
pbinom(2,5,0.8,lower.tail = FALSE)
qnorm(0.10)
0
qnorm(0.975,3,2)
1.96*2+3
pnorm(1200,mean = 1020, sd = 50, lower.tail = FALSE)
pnorm((1200-1020)/50, lower.tail = FALSE)
qnorm(0.75, mean=1020, sd = 50, lower.tail= TRUE)
.53
qnorm(pnorm(0.53))
ppois(x < 3, quantile = 3, mean = 10)
?ppois
ppois(q = 3, 10)
ppois(3,2.5*4)
pbinom(5,1000*0.1)
?pbinom
pbinom(5,1000,0.1)
pbinom(5,1000,.1)
pbinom(5,1000,.01)
ppois(5,100)
ppois(5,1000*0.01)
coinPlot(10)
coinPlot(10000)
qnorm(0.95)
0.6 + c(-1,1)*qnorm(0.975)*sqrt(0.60(0.4)/100)
0.6 + c(-1,1)*qnorm(0.975)*sqrt(0.60*(0.4)/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
x$conf
x$conf.int
binom.test(60,100)$conf.int
mywald(.2)
?t.test
library(swril)
library(swirl)
Karl
swirl()
library(swirl)
swirl
swirl()
ACComper(20)
ACCompar(20)
library(swirl)
Karl
swirl()
lamb <- 5/94.32
lamb + c(-1,1)*qnorm(0.975)*sqrt(lamb)
lamb + c(-1,1)*qnorm(0.975)*sqrt(lamb/94.32)
poisson.text(5,94.32)$conf
poisson.test(5,94.32)$conf
myplot(2)
myplot(20)
myplot2(2)
qt(.975, 2)
myplot(20)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2-g1
mean(difference)
s <- sd(difference)
mn + c(-1,1)*qt(0.975)*(s/sqrt(10))
mn + c(-1,1)*qt(0.975,9)*(s/sqrt(10))
mn + c(-1,1)*qt(0.975,9)*s/sqrt(10)
t.test(mn,s,9)$conf
?t.test
t.test(difference, paired = TRUE)$conf
t.test(difference)$conf
t.test(difference)$conf
t.test(difference)$conf.int
sp <- (7*(15.34^2))+(20*(18.23^2))
ns <- 9+21-2
ns <- 8+21-2
sp <- sqrt(sp/ns)
(132.86-127.44) + c(1,-1)*qt(.975, (8+21-2))*(sp*sqrt((1/8)+(1/21)))
132.86-127.44+c(-1,1)*qt(.975, ns)*sp*sqrt(1/8+1/21)
sp <- sqrt((var(g1)/10+var(g2)/10)/18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1,1)*qt(0.975)*sp*sqrt(1/10+1/10)
md + c(-1,1)*qt(0.975,18)*sp*sqrt(1/10+1/10)
t.test(g2,g1,paired = FALSE, var.equal = TRUE)$conf
t.test(g2,g1,paired = TRUE, var.equal = TRUE)$conf
t.test(g2,g1,paired = TRUE)$conf
num <- (15.34^2)/8+(18.23^2)/21
num <- (15.34^2/8+18.23^2/21)^2
den <- (15.34^4/8^2/7)+(18.23^4/21^2/20)
mydf <- num/den
md +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/7+18.23^2/20)
132.86-127.44+c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
1
2
2/(2.5)
15
qt(0.95,15)
dim(fs)
t.test(fs$sheight,fs$fheight)
t.test(fs$sheight,fs$fheight, paired = TRUE)
11.7885*sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
9
8
pt(2.5,15,lower.tail=FALSE)
qnorm(0.95)
qnorm(.99)
pnorm(2)
pnorm(2,lower.tail = FALSE)
mybin
pbinom(6,8,.5,lower.tail=FALSE)
pbinom(7,8,.5lower.tail = TRUE)
pbinom(7,8,.5,lower.tail = TRUE)
ppois(9,5,lower.tail = FALS)
ppois(9,5,lower.tail = FALSE)
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.94)
z <- qnorm(.95)
pnorm(30+z, 30, lower.tail= FALSE)
pnorm(30+z, 32, lower.tail = FALSE)
pnorm(30+z, mean = 32, sd =1 , lower.tail = FALSE)
pnorm(30+z, mean = 32, sd =2 , lower.tail = FALSE)
pnorm(30+z*2, mean = 32, sd =2 , lower.tail = FALSE)
power.t.test(16, 2/4, sd = 1, type = "one.sample", alt = "one.sided")$power
power.t.test(16, 2, sd = 4, type = "one.sample", alt = "one.sided")$power
power.t.test(16, 100, sd =200, type = "one.sample", alt = "one.sided")$power
t.test(power = .8, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$n
t.test(power = .8, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$n
y
power.t.test(power = .8, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n = 26, sd = 200, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 26, sd = 1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 27, sd = 1, type = "one.sample", alt = "one.sided")$delta
head(pValues)
sum(pValues == 0.05)
sum(pValues < 0.05)
sum(p.adjust(pValues, "bonferroni"))
sum(p.adjust(pValues, method = "bonferroni"))
sum(p.adjust(pValues, method = "bonferroni") < 0.05)
sum(p.adjust(pValues, method = "BH") < 0.05)
tail(trueStatus)
table(pValue < .05, trueStatus)
table(pValues2 < .05, trueStatus)
0
24/500
table(p.adjust(pValues2, method = "bonferroni") < .05, trueStatus)
table(p.adjust(pValues2, method = "BH") < .05, trueStatus)
dir()
sum(1:6)/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(gh, nh* B, replace =  TRUE)
sam <- sample(sh, nh* B, replace =  TRUE)
sam <- sample(fh, nh* B, replace =  TRUE)
resam <- matrix(sam)
resam <- matrix(sam, B, nh)
meds <- apply(resam, 1, median)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMEdians, c(.025, .975))
quantile(resampledMedians, c(.025, .975))
quantile(meds, c(.025, .975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count-Ccount$count)
mean(Bdata$count-Cdata$count)
sample(group)
perms <- sapply(1:1000, function(i) testStat(BCcounts, sample(group)))
perms <- sapply(1:10000, function(i) testStat(BCcounts, sample(group)))
mean(perms > 0bs)
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1:10000, function(i) testStat(DEcounts, sample(group)))
library(rattle)
rattle()
rattle()
library(rattle)
rattle()
install.packages("knitr")
library(knitr)
dir()
setwd("C:/Users/karl/Desktop/repo/ReproducibleResearch/Assignment1/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
names(data)
head(data)
dim(data)
length(unique(data$interval))
length(unique(data$date))
missingValues <- is.na(data$steps)
table(missingValues)
missingValues <- as.numeric(missingValues)
table(missingValues)
hist(data$steps)
with(data, hist(steps), xlab="Steps")
24*12
?hist
hist(data$steps, xlab = "Steps", main = "Distribution of Steps", sub="in 5-Minutes Intervals")
?hist
hist(data$steps, xlab ="Steps", main ="Steps Distribution within 5-Minutes Interval")
hist(data$steps, xlab ="Steps", main ="Steps Distribution within 5-Minutes Interval", ylim =14000)
hist(data$steps, xlab ="Steps", main ="Steps Distribution within 5-Minutes Interval", ylim =13000)
hist(data$steps, xlab ="Steps", main ="Steps Distribution within 5-Minutes Interval", ylim ="14000")
mean(data$steps)
?mean
mean(data$steps, na.rm = T)
?median
median(data$steps, na.rm=T)
hist(data$steps, xlab ="Steps", main ="Steps Distribution within 5-Minutes Interval")
head(data)
class(data$date)
library(lubridate)
close(lubridate)
unload(lubridate)
detach("lubridate")
detach("package:lubridate")
?as.Date
f <- as.Date(data$Date, format="%Y/%m/%d")
f <- as.Date(as.character(data$Date), format="%Y/%m/%d")
day(f[1])
Day(f[1])
months(f[1])
months(f[3])
head(f[`])
f[2]
f <- as.Date(as.character(data$Date), format="%Y-%m-%d")
f[1]
f <- as.Date(as.character(data$Date))
f[1]
length(unique(f))
head(data$date)
length(f)
f <- as.Date(as.character(data$date))
f[2]
mean(data$steps, na.rm = T)
median(data$steps, na.rm = T)
library(dplyr)
?summarise
f
f <- summarise(group_by(data, date), mean(steps))
clasS(f)
class(f)
dim(f)
plot(f)
plot(f, type ="l")
library(ggplot2)
names(f)
f <- summarise(group_by(data, date), sum(steps))
names(f)
names(f) <- c("Date", "Steps Taken")
g1 <- ggplot(f, aes(Date, Steps Taken))
g1 <- ggplot(f, aes(x="Date", y="Steps Taken"))
g1 + geom_line()
head(f)
plot(f, type = l)
plot(f, type = "l")
f <- summarise(group_by(data, interval), mean(steps))
plot(f, type = "l")
head(f)
f <- summarise(group_by(data, interval), mean(steps, na.rm=TRUE))
head(f)
plot(f, type = "l")
plot(f, type = "l",xlab = "5-Minutes Interval", ylab = "Average Steps in Interval")
names(data)
dim(f)
names(f) <- c("Interval","Average Steps")
g1 <- ggplot(f, aes(Interval, Average Steps))
g1 <- ggplot(f, aes("Interval","Average Steps"))
g1 + geom_line()
names(f) <- c("Interval","AverageSteps")
g1 <- ggplot(f, aes(Interval, AverageSteps))
g1 + geom_line()
max(f$AverageSteps)
dim(f)
max(f$Interval)
max(data$interval)
plot(f)
plot(f, type ="l")
max(f)
max(f$AverageSteps)
x <- max(f$AverageSteps)
View(f)
835/60
class(missingValues)
sum(missingValuees)
sum(missingValues)
2304/nrow(data)
?merge
?match
head(data)
x <- data$interval[1] %in% f$Interval
length(x)
x
x <- data$interval[1] %in% f
length(x)
data$interval[1]
x <- data$interval[1] %in% f$Interval
x
x <- data$interval[2] %in% f$Interval
x
head(f)
tail(f))
tail(f)
names(data)
data$missingValues <- as.numeric(is.na(data$step))
data <- mutate(data, ImputedSteps = ifelse(missingValues==1,f[interval/5,2],steps))
sum(as.numeric(is.na(data$ImputedSteps)))
View(data)
table(is.na(data$ImputedSteps))
table(is.na(f$AverageSteps))
is.na(data$interval)
table(is.na(data$interval))
min(f$AverageSteps)
data$v <- as.numeric(is.na(data$ImputedSteps))
1440/5
940/5
f[288,]
2355/5
length(unique(data$interval))
length(unique(f$Interval))
View(cbind(unique(data$interval),f$Interval))
179*5
?merge
x <- merge(data, f, by.x=interval, by.y=Interval)
x <- merge(data, f, by.x="interval", by.y="Interval")
View(x)
data$v <- NULL
x$v <- NULL
x <- mutate(x, ImputedSteps = ifelse(missingValues==1,AverageSteps,steps))
sum(as.numeric(is.na(x$ImputedSteps)))
dailytotal <- summarise(group_by(data,date), sum(steps))
names(dailytotal) <- c("Date", "TotalSteps")
hist(dailytotal$TotalSteps, xlab ="Steps per Day", main ="Steps Distribution within Day")
mean(dailytotal$TotalSteps)
dailytotal <- summarise(group_by(data,date), sum(steps,rm.na=T))
names(dailytotal) <- c("Date", "TotalSteps")
hist(dailytotal$TotalSteps, xlab ="Steps per Day", main ="Steps Distribution within Day")
mean(dailytotal$TotalSteps)
View(dailytotal)
?mean
dailytotal <- summarise(group_by(data,date), sum(steps, na.rm=T))
names(dailytotal) <- c("Date", "TotalSteps")
hist(dailytotal$TotalSteps, xlab ="Steps per Day", main ="Steps Distribution within Day")
mean(dailytotal$TotalSteps)
median(dailytotal$TotalSteps)
dailytotal2 <- summarise(group_by(x,date), sum(ImputedSteps))
names(dailytotal) <- c("Date", "TotalSteps")
hist(dailytotal2$TotalSteps, xlab ="Steps per Day", main ="Steps Distribution within Day")
names(x)
head(dailytotal2)
names(dailytotal2) <- c("Date", "TotalSteps")
hist(dailytotal2$TotalSteps, xlab ="Steps per Day", main ="Steps Distribution within Day")
mean(dailytotal2$TotalSteps)
median(dailytotal2$TotalSteps)
?weekdays
weekdays(x$date[1])
weekdays(data$date[1])
weekdays(as.Date(x$date[1]))
x$day <- weekdays(as.Date(x$date))
table(x$day)
weekend <- c("Saturday", "Sunday")
"Friday" %in% weekend
x <- mutate(x, weekday = ifelse(day %in% weekend, 0,1))
with(x, table(day,weekday))
2592*5
12960+4608
IntervalAverages2 <- summarise(group_by(x,interval,weekday), sum(ImputedSteps))
head(IntervalAverages2)
IntervalAverages2 <- summarise(group_by(x,interval,weekday), average(ImputedSteps))
IntervalAverages2 <- summarise(group_by(x,interval,weekday), mean(ImputedSteps))
head(IntervalAverages2)
g2 <- ggplot(IntervalAverages2, aes(interval,mean(ImputedSteps)))
g2 + geom_line() + facet_grid(weekday~.)
names(IntervalAverages2) <- c("Interval", "Weekday", "Steps")
g2 <- ggplot(IntervalAverages2, aes(Interval, Steps))
g2 + geom_line() + facet_grid(Weekday~.)
x$weekday <- ifelse(x$weekday==1,"Weekday","Weekend")
View(x)
IntervalAverages2 <- summarise(group_by(x,interval,weekday), mean(ImputedSteps))
names(IntervalAverages2) <- c("Interval", "Weekday", "Steps")
g2 <- ggplot(IntervalAverages2, aes(Interval, Steps))
g2 + geom_line() + facet_grid(Weekday~.)
IntervalAverages <- summarise(group_by(data, interval), mean(steps))
names(IntervalAverages) <- c("Interval", "AverageSteps")
plot(IntervalAverages, xlab="5-Minutes Interval", ylab="Average Steps Taken")
IntervalAverages <- summarise(group_by(data, interval), mean(steps))
names(IntervalAverages) <- c("Interval", "AverageSteps")
IntAve <- ggplot(IntervalAverages,aes(Interval, AverageSteps))
IntAve + geom_line()
head(IntervalAverages)
IntervalAverages <- summarise(group_by(data, interval), mean(steps, na.rm=T))
names(IntervalAverages) <- c("Interval", "AverageSteps")
IntAve <- ggplot(IntervalAverages,aes(Interval, AverageSteps))
IntAve + geom_line()
x1 <- merge(data, IntervalAverages, by.x="interval",by.y="Interval")
names(x1)
x1 <- mutate(x1, ImputedSteps =ifelse(missingValues==1,AverageSteps,steps))
x1$steps <- NULL
